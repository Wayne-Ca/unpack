PROCEDURE readVars(* Variable Record *)(* Array *)TYPE VREC=vTyp,nTyp:BYTE; nVar:BOOLEAN; vOff,vdOff,dsOff,dmOff,fOff,pOff:INTEGERDIM varRec(400):VREC(* File Record *)TYPE VFRC=vdTkn:BYTE; vdPtr,vdSiz,dsPtr,dsvSiz,dsSiz,dmSiz,fSiz,pSiz,elem1,elem2,elem3,vSRLen:INTEGER; vArray:STRING[19]; vName:STRING[29]; vStrLen:STRING[7]; vRecNum,vRefCnt,intReal,pVar:INTEGER; mTyp,vLnk:BYTE; pRec,pFld:BOOLEANDIM varFRec:VFRC(* Colors *)TYPE COLR=white,purple,black,green,yellow,pink,cyan,blue,white2,purple2,black2,green2,yellow2,pink2,cyan2,blue2:BYTEDIM color:COLRDIM vFile,dFile,oFile:STRING[29]DIM vPath,dPath,oPath:BYTEDIM vOpen,dOpen,oOpen,quit:BOOLEANDIM rNum,recNum,varCount,col,row,tmpTkn:INTEGERDIM key:STRING[1]; numRec:STRING[3]; tmpCmd:STRING[6]; cPrompt1:STRING[23]; cPrompt:STRING[60]BASE 0(* Colors *)color.white=0 \color.purple=1 \color.black=2 \color.green=3 \color.yellow=4color.pink=5 \color.cyan=6 \color.blue=7 \color.white2=8 \color.purple2=9color.black2=10 \color.green2=11 \color.yellow2=12 \color.pink2=13color.cyan2=14 \color.blue2=15cPrompt:="[UP]=Previous [DOWN]=Next [P]rint [G]oto [H]elp [ENTER]=Quit"vFile:="/DD/DATA/varDefs"dFile:="/DD/DATA/procData"vOpen:=FALSEdOpen:=FALSEquit:=FALSErecNum:=0OPEN #dPath,dFile:READdOpen:=TRUESEEK #dPath,22GET #dPath,varRecCLOSE #dPathdOpen:=FALSEOPEN #vPath,vFile:UPDATEvOpen:=TRUEGET #vPath,varCountcPrompt1:="Goto Record # (1-"+STR$(varCount)+"): "GOSUB 116GOSUB 130GOSUB 200REPEAT  SEEK #vPath,recNum*SIZE(varFRec)+2  GET #vPath,varFRec  GOSUB 210  col:=10 \row:=23 \ GOSUB 110  PRINT cPrompt;  GOSUB 140UNTIL quitGOSUB 135CLOSE #vPathvOpen:=FALSEGOSUB 117END110 RUN GFX2("CURXY",col,row) \ RETURN115 RUN GFX2("EREOLINE") \ RETURN116 RUN GFX2("CUROFF") \ RETURN117 RUN GFX2("CURON") \ RETURN120 RUN GFX2("CLEAR") \ RETURN125 RUN GFX2("OWSET",1,0,1,80,22,color.white2,color.black2) \ RETURN126 RUN GFX2("OWEND") \ RETURN130 SHELL "ex tmode eko=0" \ RETURN135 SHELL "ex tmode eko=1" \ RETURN140 key:=" "REPEAT  RUN Inkey(key)  IF key="" THEN    key:=" "  ENDIFUNTIL SUBSTR(key,"GgHhPp"+CHR$(10)+CHR$(12)+CHR$(13))>1IF key=CHR$(10) THEN  recNum:=recNum+1  IF recNum>varCount-1 THEN    recNum:=varCount-1  ENDIFELSE  IF key=CHR$(12) THEN  recNum:=recNum-1    IF recNum<0 THEN      recNum:=0    ENDIF  ELSE    IF key=CHR$(13) THEN      quit:=TRUE      PRINT    ELSE      IF SUBSTR(key,"Gg")>0 THEN        col:=14 \row:=23 \ GOSUB 110        GOSUB 115        PRINT "       "; cPrompt1; "       ";        col:=44 \ GOSUB 110        (* GOSUB 135 *)        GOSUB 117145     numRec:=""        REPEAT          RUN Inkey(key)          IF key>="0" AND key<="9" THEN            PRINT key;            numRec:=numRec+key          ENDIF        UNTIL key=CHR$(13)        IF numRec="" THEN          RETURN        ENDIF        IF VAL(numRec)<1 OR VAL(numRec)>varCount THEN 145        (* GOSUB 130 *)        GOSUB 116        recNum:=VAL(numRec)-1      ELSE        IF SUBSTR(key,"Hh")>0 THEN          GOSUB 125150       GOSUB 220          GOSUB 160          IF key="5" OR key=CHR$(13) THEN            GOSUB 126          ELSE            ON VAL(key) GOSUB 230,240,250,260            GOTO 150          ENDIF        ELSE          IF SUBSTR(key,"Pp")>0 THEN            GOSUB 110 \ GOSUB 115            PRINT "Writing Records...";            GOSUB 270            PRINT "Done";          ENDIF        ENDIF      ENDIF    ENDIF  ENDIFENDIFRETURN160 key:=" "REPEAT  RUN Inkey(key)  IF key="" THEN    key:=" "  ENDIFUNTIL SUBSTR(key,"12345"+CHR$(13))>0RETURN(* Display *)200 GOSUB 120col:=3 \row:=0 \ GOSUB 110PRINT "Record#:";col:=31 \row:=0 \ GOSUB 110PRINT "Name:";col:=1 \row:=1 \ GOSUB 110PRINT "Offset to:";col:=31 \row:=1 \ GOSUB 110PRINT "Type:";col:=9 \row:=3 \ GOSUB 110PRINT "Data";col:=20 \row:=3 \ GOSUB 110PRINT "Field";col:=32 \row:=3 \ GOSUB 110PRINT "PARAM";col:=1 \row:=4 \ GOSUB 110PRINT "Offset:";col:=3 \row:=5 \ GOSUB 110PRINT "Size:";col:=15 \row:=7 \ GOSUB 110PRINT "VDT";col:=5 \row:=8 \ GOSUB 110PRINT "Offset:";col:=40 \row:=8 \ GOSUB 110PRINT "Entry size:";col:=6 \row:=9 \ GOSUB 110PRINT "Token:";col:=43 \row:=9 \ GOSUB 110PRINT "Pointer:";col:=15 \row:=11 \ GOSUB 110PRINT "DSAT";col:=7 \row:=12 \ GOSUB 110PRINT "Type:";col:=51 \row:=12 \ GOSUB 110PRINT "Var Size:";col:=5 \row:=13 \ GOSUB 110PRINT "Offset:";col:=19 \row:=13 \ GOSUB 110PRINT "Pointer:";col:=47 \row:=13 \ GOSUB 110PRINT "Str/Rec Size:";col:=3 \row:=14 \ GOSUB 110PRINT "Element1:";col:=27 \row:=14 \ GOSUB 110PRINT "Element2:";col:=51 \row:=14 \ GOSUB 110PRINT "Element3:";col:=1 \row:=15 \ GOSUB 110PRINT "Entry size:";col:=19 \row:=15 \ GOSUB 110PRINT "Array:";col:=53 \row:=15 \ GOSUB 110PRINT "Length:";col:=1 \row:=17 \ GOSUB 110PRINT "FOR/NEXT or";col:=16 \row:=17 \ GOSUB 110PRINT "Variable Type";col:=33 \row:=17 \ GOSUB 110PRINT "Named Variable ";col:=51 \row:=17 \ GOSUB 110PRINT "INTEGER or REAL";col:=1 \row:=18 \ GOSUB 110PRINT "Named Vars:";col:=1 \row:=20 \ GOSUB 110PRINT "Record#";col:=11 \row:=20 \ GOSUB 110PRINT "Total Refs";col:=24 \row:=20 \ GOSUB 110PRINT "Parent Rec";col:=37 \row:=20 \ GOSUB 110PRINT "Var Type";col:=48 \row:=20 \ GOSUB 110PRINT "ExtCmd";col:=57 \row:=20 \ GOSUB 110PRINT "Is Record";col:=67 \row:=20 \ GOSUB 110PRINT "Is Field";RETURN(* Variable Data *)210 col:=11 \row:=0 \ GOSUB 110PRINT USING "i4<",recNum+1;col:=37 \row:=0 \ GOSUB 110 \ GOSUB 115PRINT varFRec.vName;col:=12 \row:=1 \ GOSUB 110PRINT USING "h4",varRec(recNum).vOff;col:=37 \row:=1 \ GOSUB 110PRINT USING "h2",varRec(recNum).vTyp;IF varRec(recNum).vTyp>=$80 AND varRec(recNum).vTyp<=$83 THEN  IF varRec(recNum).vTyp=$80 THEN    PRINT " BYTE";  ELSE    IF varRec(recNum).vTyp=$81 THEN      PRINT " INTEGER";    ELSE      IF varRec(recNum).vTyp=$82 THEN        PRINT " REAL";      ELSE        IF varRec(recNum).vTyp=$83 THEN          PRINT " BOOLEAN";        ENDIF      ENDIF    ENDIF  ENDIF  PRINT " (Data Memory)   ";ELSE  IF varRec(recNum).vTyp>=$00 AND varRec(recNum).vTyp<=$03 THEN    IF varRec(recNum).vTyp=$00 OR  varRec(recNum).vTyp=$01 THEN      PRINT " INTEGER";    ELSE      IF varRec(recNum).vTyp=$02 OR  varRec(recNum).vTyp=$03 THEN        PRINT " REAL";      ENDIF    ENDIF    PRINT " (Data Memory)   ";  ELSE    IF varRec(recNum).vTyp=$46 OR varRec(recNum).vTyp=$47 THEN      IF varFRec.intReal=1 THEN        PRINT " INTEGER";      ELSE        IF varFRec.intReal=2 THEN          PRINT " REAL";        ENDIF      ENDIF      PRINT " (Data Memory)   ";    ELSE      IF varRec(recNum).vTyp=$84 THEN        PRINT " (DSAT)               ";      ELSE        PRINT " (VDT)                ";      ENDIF    ENDIF  ENDIFENDIFcol:=9 \row:=4 \ GOSUB 110PRINT USING "h4",varRec(recNum).dmOff;col:=20 \row:=4 \ GOSUB 110PRINT USING "h4",varRec(recNum).fOff;col:=32 \row:=4 \ GOSUB 110PRINT USING "h4",varRec(recNum).pOff;col:=8 \row:=5 \ GOSUB 110PRINT USING "i5<",varFRec.dmSiz;col:=19 \row:=5 \ GOSUB 110PRINT USING "i5<",varFRec.fSiz;col:=31 \row:=5 \ GOSUB 110PRINT USING "i5<",varFRec.pSiz;col:=13 \row:=8 \ GOSUB 110PRINT USING "h4",varRec(recNum).vdOff;col:=51 \row:=8 \ GOSUB 110PRINT USING "i5<",varFRec.vdSiz;col:=15 \row:=9 \ GOSUB 110PRINT "                      ";col:=13 \row:=9 \ GOSUB 110PRINT USING "h2",varFRec.vdTkn;IF varFRec.vdTkn>0 THEN  PRINT " (";  IF varFRec.vdTkn>=$40 AND varFRec.vdTkn<=$5F THEN    PRINT "Field ";  ENDIF  IF varFRec.vdTkn>=$80 AND varFRec.vdTkn<=$9F THEN    PRINT "PARAM ";  ENDIF  IF varFRec.vdTkn=$40 OR varFRec.vdTkn=$60 OR varFRec.vdTkn=$80 THEN    PRINT "BYTE";  ENDIF  IF varFRec.vdTkn=$48 OR varFRec.vdTkn=$68 OR varFRec.vdTkn=$88 THEN    PRINT "BYTE";  ENDIF  IF varFRec.vdTkn=$50 OR varFRec.vdTkn=$70 OR varFRec.vdTkn=$90 THEN    PRINT "BYTE";  ENDIF  IF varFRec.vdTkn=$58 OR varFRec.vdTkn=$78 OR varFRec.vdTkn=$98 THEN    PRINT "BYTE";  ENDIF  IF varFRec.vdTkn=$41 OR varFRec.vdTkn=$61 OR varFRec.vdTkn=$81 THEN    PRINT "INTEGER";  ENDIF  IF varFRec.vdTkn=$49 OR varFRec.vdTkn=$69 OR varFRec.vdTkn=$89 THEN    PRINT "INTEGER";  ENDIF  IF varFRec.vdTkn=$51 OR varFRec.vdTkn=$71 OR varFRec.vdTkn=$91 THEN    PRINT "INTEGER";  ENDIF  IF varFRec.vdTkn=$59 OR varFRec.vdTkn=$79 OR varFRec.vdTkn=$99 THEN    PRINT "INTEGER";  ENDIF  IF varFRec.vdTkn=$42 OR varFRec.vdTkn=$62 OR varFRec.vdTkn=$82 THEN    PRINT "REAL";  ENDIF  IF varFRec.vdTkn=$4A OR varFRec.vdTkn=$6A OR varFRec.vdTkn=$8A THEN    PRINT "REAL";  ENDIF  IF varFRec.vdTkn=$52 OR varFRec.vdTkn=$72 OR varFRec.vdTkn=$92 THEN    PRINT "REAL";  ENDIF  IF varFRec.vdTkn=$5A OR varFRec.vdTkn=$7A OR varFRec.vdTkn=$9A THEN    PRINT "REAL";  ENDIF  IF varFRec.vdTkn=$43 OR varFRec.vdTkn=$63 OR varFRec.vdTkn=$83 THEN    PRINT "BOOLEAN";  ENDIF  IF varFRec.vdTkn=$4B OR varFRec.vdTkn=$6B OR varFRec.vdTkn=$8B THEN    PRINT "BOOLEAN";  ENDIF  IF varFRec.vdTkn=$53 OR varFRec.vdTkn=$73 OR varFRec.vdTkn=$93 THEN    PRINT "BOOLEAN";  ENDIF  IF varFRec.vdTkn=$5B OR varFRec.vdTkn=$7B OR varFRec.vdTkn=$9B THEN    PRINT "BOOLEAN";  ENDIF  IF varFRec.vdTkn=$44 OR varFRec.vdTkn=$64 OR varFRec.vdTkn=$84 THEN    PRINT "STRING";  ENDIF  IF varFRec.vdTkn=$4C OR varFRec.vdTkn=$6C OR varFRec.vdTkn=$8C THEN    PRINT "STRING";  ENDIF  IF varFRec.vdTkn=$54 OR varFRec.vdTkn=$74 OR varFRec.vdTkn=$94 THEN    PRINT "STRING";  ENDIF  IF varFRec.vdTkn=$5C OR varFRec.vdTkn=$7C OR varFRec.vdTkn=$9C THEN    PRINT "STRING";  ENDIF  IF varFRec.vdTkn=$45 OR varFRec.vdTkn=$65 OR varFRec.vdTkn=$85 THEN    PRINT "Record";  ENDIF  IF varFRec.vdTkn=$4D OR varFRec.vdTkn=$6D OR varFRec.vdTkn=$8D THEN    PRINT "Record";  ENDIF  IF varFRec.vdTkn=$55 OR varFRec.vdTkn=$75 OR varFRec.vdTkn=$95 THEN    PRINT "Record";  ENDIF  IF varFRec.vdTkn=$5D OR varFRec.vdTkn=$7D OR varFRec.vdTkn=$9D THEN    PRINT "Record";  ENDIF  IF varFRec.vdTkn>=$48 AND varFRec.vdTkn<=$5F OR varFRec.vdTkn>=$68 AND varFRec.vdTkn<=$7F OR varFRec.vdTkn>=$88 AND varFRec.vdTkn<=$9F THEN    PRINT " Array";  ENDIF  IF varFRec.vdTkn=$A0 THEN    PRINT "Subroutine";  ENDIF  PRINT ")";ENDIFcol:=52 \row:=9 \ GOSUB 110PRINT USING "h4",varFRec.vdPtr;IF varFRec.vdTkn>=$40 AND varFRec.vdTkn<=$43 OR varFRec.vdTkn>=$60 AND varFRec.vdTkn<=$63 OR varFRec.vdTkn>=$80 AND varFRec.vdTkn<=$83 OR varFRec.vdTkn=$A0 THEN  PRINT " (Data Memory)";ELSE  IF varFRec.vdTkn>0 THEN    PRINT " (DSAT)       ";  ELSE    PRINT "              ";  ENDIFENDIFcol:=13 \row:=12 \ GOSUB 110IF varRec(recNum).vTyp=$84 THEN  PRINT "Instruction Entry: STRING";ELSE  IF varFRec.vdTkn>=$44 AND varFRec.vdTkn<=$5F OR varFRec.vdTkn>=$64 AND varFRec.vdTkn<=$7F OR varFRec.vdTkn>=$84 AND varFRec.vdTkn<=$9F THEN    PRINT "VDT Entry                ";  ELSE    PRINT "                         ";  ENDIFENDIFcol:=60 \row:=12 \ GOSUB 110PRINT USING "i6<",varFRec.dsvSiz;col:=13 \row:=13 \ GOSUB 110PRINT USING "h4",varRec(recNum).dsOff;col:=28 \row:=13 \ GOSUB 110PRINT USING "h4",varFRec.dsPtr;col:=60 \row:=13 \ GOSUB 110PRINT USING "i6<",varFRec.vSRLen;col:=12 \row:=14 \ GOSUB 110PRINT USING "i6<",varFRec.elem1;col:=36 \row:=14 \ GOSUB 110PRINT USING "i6<",varFRec.elem2;col:=60 \row:=14 \ GOSUB 110PRINT USING "i6<",varFRec.elem3;col:=12 \row:=15 \ GOSUB 110PRINT USING "i6<",varFRec.dsSiz;col:=26 \row:=15 \ GOSUB 110PRINT USING "s19<",varFRec.vArray;col:=61 \row:=15 \ GOSUB 110PRINT USING "s7<",varFRec.vStrLen;col:=15 \row:=18 \ GOSUB 110PRINT USING "i2<",varRec(recNum).nTyp;col:=33 \row:=18 \ GOSUB 110PRINT USING "b5",varRec(recNum).nVar;col:=50 \row:=18 \ GOSUB 110PRINT USING "i3<",varFRec.intReal;col:=0 \row:=21 \ GOSUB 110PRINT USING "i4<",varFRec.vRecNum;col:=10 \row:=21 \ GOSUB 110PRINT USING "i4<",varFRec.vRefCnt;col:=23 \row:=21 \ GOSUB 110PRINT USING "i4<",varFRec.pVar;col:=36 \row:=21 \ GOSUB 110PRINT USING "i2<",varFRec.mTyp; REPEAT  READ tmpTkn,tmpCmd UNTIL varFRec.vLnk=tmpTkncol:=48 \row:=21 \ GOSUB 110PRINT USING "s6",tmpCmd;col:=57 \row:=21 \ GOSUB 110PRINT USING "b5",varFRec.pRec;col:=67 \row:=21 \ GOSUB 110PRINT USING "b5",varFRec.pFld;col:=21 \row:=23 \ GOSUB 110RETURN220 GOSUB 120col:=5 \row:=3 \ GOSUB 110PRINT "1 Top Section"col:=5 \row:=4 \ GOSUB 110PRINT "2 VDT Section"col:=5 \row:=5 \ GOSUB 110PRINT "3 DSAT Section"col:=5 \row:=6 \ GOSUB 110PRINT "4 Bottom Section"RETURN230 GOSUB 120PRINT "Top Section"PRINTPRINT "  Record#: Current Variable Record #"PRINT "     Name: Current Variable Name"PRINT "Offset to: DSAT or Data Memory Offset Address"PRINT "     Type: Primary Variable Type Token"PRINT "   Offset: Offset Address to Data, Record, Parameter Memory"PRINT "     Size: Data Size in Data, Record, Parameter Memory"PRINTPRINT "Press [ENTER]";GOSUB 160RETURN240 GOSUB 120PRINT "VDT Section"PRINTPRINT "    Offset: VDT Offset Address"PRINT "Entry size: # of BYTEs used in this VDT entry"PRINT "     Token: Secondary Variable Type Token"PRINT "   Pointer: DSAT or Data Memory Offset Address"PRINTPRINT "Press [ENTER]";GOSUB 160RETURN250 GOSUB 120PRINT "DSAT Section"PRINTPRINT "        Type: Instruction Entry STRING or VDT Entry"PRINT "    Var Size: Total Variable Size"PRINT "      Offset: DSAT Offset Address"PRINT "     Pointer: Data Memory Offset Address"PRINT "Str/Rec Size: String/Record Size if Array"PRINT "    Element1: # of Array 1 Elements"PRINT "    Element2: # of Array 2 Elements"PRINT "    Element3: # of Array 3 Elements"PRINT "  Entry size: # of BYTEs used in this DSAT entry"PRINT "       Array: Array String used with dimension statements"PRINT "      Length: STRING Length used with dimension statements"PRINTPRINT "Press [ENTER]";GOSUB 160RETURN260 GOSUB 120PRINT "Bottom Section:"PRINTPRINT "FOR/NEXT or Named Variables"PRINT "  Variable Type: 0=Field Variable"PRINT "                 1=Named Variable"PRINT "                 2=Parameter Variable"PRINT "                 3=Subroutine or Internal Variable"PRINT " Named Variable: TRUE=Named  FALSE=Internal"PRINT "INTEGER or REAL: 0=N/A  1=INTEGER  2=REAL"PRINTPRINT "Miscellaneous Variables"PRINT "   Record#: Parent Record Variable #"PRINT "Total Refs: # of References to this variable"PRINT "Parent Rec: Parent Record # (if a Field Variable)"PRINT "  Var Type: 1=Simple Variable  2=STRING  3=VDT Entry"PRINT "    ExtCmd: $24=KILL    $29=CREATE  $2A=OPEN  $30=CLOSE"PRINT "            $32=DELETE  $33=CHAIN   $34=SHELL"PRINT "   Pot Rec: Is a Potential Record Variable"PRINT "  Is Field: Is a Field Variable"PRINTPRINT "Press [ENTER]";GOSUB 160RETURNDATA $00,"",$24,"KILL",$29,"CREATE",$2A,"OPEN",$30,"CLOSE",$32,"DELETE",$33,"CHAIN",$34,"SHELL"270 oFile:="vars.B09"CREATE #oPath,oFile:WRITEoOpen:=TRUErNum:=0GOSUB 280REPEAT  SEEK #vPath,rNum*SIZE(varFRec)+2  GET #vPath,varFRec  GOSUB 290  rNum:=rNum+1UNTIL rNum=varCountCLOSE #oPathoOpen:=FALSERETURN280 IF oOpen THENPRINT #oPath, "RNum _Instr_ VDT__________VDT_ DSAT___________DSAT Data_Mmry __Field__ Parm Expd"PRINT #oPath USING "i4>,s76",varCount," Tk Pntr Addr Tk Pntr Size Addr Pntr Size Size Addr Size Addr Size Addr Size ";PRINT #oPath, "VES_ TES_ MES_ SRSz Array Size String   Variable/Subroutine Name      StrLen"ENDIFRETURN290 IF oOpen THEN  (* Print to Output File *)  !"Ref  _Instr_ "  !"Num_ Tk Pntr "  PRINT #oPath USING "i4>,s1",rNum+1," ";  PRINT #oPath USING "h2,s1",varRec(rNum).vTyp," ";  PRINT #oPath USING "h4,s1",varRec(rNum).vOff," ";  IF varFRec.vdTkn>0 THEN    !"________VDT______ "    !"Addr Tk Pntr Size "    PRINT #oPath USING "h4,s1",varRec(rNum).vdOff," ";    PRINT #oPath USING "h2,s1",varFRec.vdTkn," ";    PRINT #oPath USING "h4,s1",varFRec.vdPtr," ";    PRINT #oPath USING "h4,s1",varFRec.vdSiz," ";  ELSE    PRINT #oPath, "---- -- ---- ---- ";  ENDIF  IF varFRec.dsSiz>0 THEN    !"DSAT___________DSAT "    !"Addr Pntr Size Size "    PRINT #oPath USING "h4,s1",varRec(rNum).dsOff," ";    PRINT #oPath USING "h4,s1",varFRec.dsPtr," ";    PRINT #oPath USING "h4,s1",varFRec.dsvSiz," ";    PRINT #oPath USING "h4,s1",varFRec.dsSiz," ";  ELSE    PRINT #oPath, "---- ---- ---- ---- ";  ENDIF  IF varFRec.dmSiz>0 THEN    !"Data_Mmry "    !"Addr Size "    PRINT #oPath USING "h4,s1",varRec(rNum).dmOff," ";    PRINT #oPath USING "h4,s1",varFRec.dmSiz," ";  ELSE    PRINT #oPath, "---- ---- ";  ENDIF  IF varFRec.fSiz>0 THEN    !"__Field__ "    !"Addr Size "    PRINT #oPath USING "h4,s1",varRec(rNum).fOff," ";    PRINT #oPath USING "h4,s1",varFRec.fSiz," ";  ELSE    PRINT #oPath, "---- ---- ";  ENDIF  IF varFRec.pSiz>0 THEN    !"Parm Expd";    !"Addr Size";    PRINT #oPath USING "h4,s1",varRec(rNum).pOff," ";    PRINT #oPath USING "h4,s1",varFRec.pSiz," ";  ELSE    PRINT #oPath, "---- ---- ";  ENDIF  IF varFRec.elem1>0 THEN    !"VES_ "    PRINT #oPath USING "h4,s1",varFRec.elem1," ";  ELSE    PRINT #oPath, "---- ";  ENDIF  IF varFRec.elem2>0 THEN    !"TES_ "    PRINT #oPath USING "h4,s1",varFRec.elem2," ";  ELSE    PRINT #oPath, "---- ";  ENDIF  IF varFRec.elem3>0 THEN    !"MES_ "    PRINT #oPath USING "h4,s1",varFRec.elem3," ";  ELSE    PRINT #oPath, "---- ";  ENDIF  IF varFRec.vSRLen>0 THEN    !"SRSz "    PRINT #oPath USING "h4,s1",varFRec.vSRLen," ";  ELSE    PRINT #oPath, "---- ";  ENDIF  IF varFRec.vArray<>"" THEN    !"Array Size String   "    PRINT #oPath USING "s19,s1",varFRec.vArray," ";  ELSE    PRINT #oPath, "------------------- ";  ENDIF  IF varFRec.vName<>"" THEN    !"Variable/Subroutine Name      "    PRINT #oPath USING "s29,s1",varFRec.vName," ";  ELSE    PRINT #oPath, "----------------------------- ";  ENDIF  IF varFRec.vStrLen<>"" THEN    !"StrLen ";    PRINT #oPath USING "s7",varFRec.vStrLen;  ELSE    PRINT #oPath, "-------";  ENDIF  PRINT #oPathENDIFRETURN